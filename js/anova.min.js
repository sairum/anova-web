"use strict";var anova=(function(){var filename='';const DPL=5;const RANDOM=0;const FIXED=1;var data=[];var nfactors=0;var factors=[];var terms=[];var mcomps=[];var replicates=0;var corrected_df=0;var total={df:0,ss:0};var residual={name:'Error',df:0,ss:0};var nesting=false;var max_value=Number.MIN_SAFE_INTEGER;var min_value=Number.MAX_SAFE_INTEGER;const DEFAULT_REJECTION_LEVEL=0.05;var alpha=false;var rejection_level=DEFAULT_REJECTION_LEVEL;var mt_rejection_level=DEFAULT_REJECTION_LEVEL;var ignoreinteractions=false;function buildMultipleComparisons(){}
function buildTerms(){let s=Math.pow(2,nfactors);for(let i=1;i<s;i++){let temp={idx:0,name:"",codes:[],order:0,combins:1,nlevels:0,levels:[],sumx:[],sumx2:[],n:[],average:[],ss:0,df:1,SS:0,ct_codes:[],varcomp:[],MS:0,P:0,against:-1,F:0,type:FIXED};for(let j=0;j<nfactors;j++){temp.idx=i;if((i&Math.pow(2,j))){temp.codes[j]=1;temp.order++;temp.combins*=factors[j].nlevels;temp.type*=factors[j].type;}else{temp.codes[j]=0;}
temp.codes.push(0);}
terms.push(temp);}
if(getCellsSS()){terms.sort(function(a,b){return(a.order-b.order)||(a.idx-b.idx)});for(let i=0,len=terms.length-2;i<len;i++){if(terms[i].order==1){terms[i].df=factors[i].nlevels-1;}else{let m=1;for(let j=0;j<nfactors;j++){if(terms[i].codes[j]>0)m*=factors[j].nlevels-1;}
terms[i].df=m;}
terms[i].MS=terms[i].SS/terms[i].df;}
let e=terms.length-2;terms[e].MS=terms[e].SS/terms[e].df;correctForNesting();computeCTRules();displayAverages();buildMultipleComparisons();displayMultipleComparisons();displayANOVA();}}
function computeCTRules(){for(let i=0,tl=terms.length-2;i<tl;i++){terms[i].ct_codes=new Array(nfactors+1).fill(0);for(let k=0;k<nfactors;k++){let t=terms[i].codes[k];if(t!=0){if(t==1){if(factors[k].type===RANDOM)terms[i].ct_codes[k]=1;else terms[i].ct_codes[k]=0;}else{terms[i].ct_codes[k]=1;}}else{terms[i].ct_codes[k]=factors[k].nlevels;}}
terms[i].ct_codes[nfactors]=replicates;}
let tl=terms.length-1;for(let i=0;i<tl;i++){for(let j=0;j<tl;j++){let included=true;for(let k=0;k<nfactors+1;k++){if((terms[i].codes[k]>0)&&(terms[j].codes[k]==0)){included=false;break;}}
if(included)terms[i].varcomp.push(1);else terms[i].varcomp.push(0);}}
for(let i=0;i<tl;i++){for(let j=0;j<tl;j++){if(terms[i].varcomp[j]==1){let product=1;for(let k=0;k<nfactors+1;k++){if(terms[i].codes[k]==0){product*=terms[j].ct_codes[k];}}
terms[i].varcomp[j]=product;}}}
tl=terms.length;for(let i=0;i<tl-2;i++){let pf;for(let j=tl-2;j>=0;j--){let found=true;if(i!=j){for(let k=0,vl=terms[i].varcomp.length;k<vl;k++){if(k!=i){if(terms[i].varcomp[k]!=terms[j].varcomp[k]){found=false
break;}}}}else{found=false;}
if(found){terms[i].against=j;terms[i].F=terms[i].MS/terms[j].MS;pf=jStat.centralF.cdf(terms[i].F,terms[i].df,terms[j].df);terms[i].P=1-pf;break;}else{terms[i].against=-1;terms[i].F=NaN;terms[i].P=NaN;}}}
displayCTRules();}
function median(l){if(l.length==0)return;l.sort((a,b)=>a-b);let mid=Math.floor(l.length/2);let median=l.length%2===1?l[mid]:(l[mid-1]+l[mid])/2;return median;}
function computeCells(){let maxn=0;let dl=data.length;for(let i=0;i<dl;i++){for(let j=0,len=data[i].levels.length;j<len;j++){let l=data[i].levels[j];let k=factors[j].levels.indexOf(l);data[i].codes[j]=k;}
data[i].sumx=0;data[i].sumx2=0;data[i].n=data[i].values.length;for(let j=0;j<data[i].n;j++){data[i].sumx+=data[i].values[j];data[i].sumx2+=Math.pow(data[i].values[j],2);}
data[i].n_orig=data[i].n;if(data[i].n>maxn)maxn=data[i].n;}
for(let c of data){if(c.n<maxn){let diff=maxn-c.n;for(let j=0;j<diff;j++){corrected_df++;c.sumx+=c.average;c.sumx2+=Math.pow(c.average,2);c.n++;}}
c.average=c.sumx/c.n;c.variance=(c.sumx2-Math.pow(c.sumx,2)/c.n)/(c.n-1);c.median=median(c.values);}
let tsumx=0,tsumx2=0,tn=0;for(let d of data){d.ss=d.sumx2-Math.pow(d.sumx,2)/d.n;residual.df+=d.n-1;residual.ss+=d.ss;total.df+=d.n;tsumx+=d.sumx;tsumx2+=d.sumx2;tn+=d.n;}
total.df-=1;total.ss=tsumx2-Math.pow(tsumx,2)/tn;residual.orig_df=residual.df;residual.df-=corrected_df;total.orig_df=total.df;total.df-=corrected_df;replicates=data[0].n;homogeneityTests();buildTerms();}
function correctForNesting(){if((nfactors==1)||(!nesting))return;let current=0;while(current<terms.length-2){let c=current+1;while(c<terms.length-2){if(terms[current].ss==terms[c].ss){for(let k=0;k<nfactors;k++){if((terms[c].codes[k]!=terms[current].codes[k])){terms[current].codes[k]=2;if(terms[current].order==1){factors[current].nestedin[k]=1;factors[current].type=RANDOM;}}}
terms[current].SS+=terms[c].SS;terms[current].averages=terms[c].averages;terms[current].sumx=terms[c].sumx;terms[current].sumx2=terms[c].sumx2;terms[current].levels=terms[c].levels;terms[current].nlevels=terms[c].nlevels;terms[current].combins=terms[c].combins;terms.splice(c,1);}else{c++;}}
current++;}
correctTermNames();for(let i=0,tl=terms.length-2;i<tl;i++){terms[i].df=1;for(let k=0;k<nfactors;k++){if(terms[i].codes[k]==1)terms[i].df*=factors[k].nlevels-1;if(terms[i].codes[k]==2)terms[i].df*=factors[k].nlevels;}
terms[i].MS=terms[i].SS/terms[i].df;}}
function correctTermNames(){for(let i=0;i<nfactors;i++){for(let j=0;j<nfactors;j++){if(factors[i].nestedin[j]==1){factors[i].depth++;factors[i].nlevels/=factors[j].nlevels;}}}
let nfl=[];for(let i=0;i<nfactors;i++){let nested=factors[i].depth;if(nested>0){let f={};f.index=i;f.codes=factors[i].nestedin;f.depth=factors[i].depth;f.name=factors[i].name;nfl.push(f);}}
nfl.sort(function(a,b){return a.depth-b.depth;});for(let i=0,len=nfl.length;i<len;i++){if(nfl[i].depth>1){for(let j=0,len=nfl.length;j<len;j++){if((i!=j)&&(nfl[j].depth<nfl[i].depth)){for(let k=0;k<nfactors;k++){if((nfl[i].codes[k]==1)&&(nfl[j].codes[k]==1)){let f=nfl[j].index;if(nfl[i].codes[f]==1)nfl[i].codes[k]=0;}}}}
let nm=[];let j=nfl[i].index;for(let k=0;k<nfactors;k++){if(nfl[i].codes[k]==1)nm.push(factors[k].name);}
factors[j].name+='('+nm.join('&times;')+')';}else{let j=nfl[i].codes.indexOf(1);let k=nfl[i].index;if(j!=-1)factors[k].name+='('+factors[j].name+')';}}
for(let i=0,len=terms.length-2;i<len;i++){let nm=[];for(let j=0;j<nfactors;j++){if(terms[i].codes[j]==1){nm.push(factors[j].name);}}
terms[i].name=nm.join('&times;');}}
function displayANOVA(){let text='<div class="ct"><table>'+'<thead><tr><th>Source</th><th>SS</th><th>df</th>'+'<th>MS</th><th>F</th><th>Prob.</th><th>MS Denom.</th>'+'</tr></thead><tbody>';for(let i=0,len=terms.length;i<len;i++){text+='<tr>';text+='<td>'+terms[i].name+'</td>';text+='<td class=\"flt\">'+terms[i].SS.toFixed(DPL).toString()+'</td>';text+='<td>'+terms[i].df.toString()+'</td>';if(terms[i].name!='Total'){text+='<td class=\"flt\">'+terms[i].MS.toFixed(DPL).toString()+'</td>';}else{text+='<td></td>';}
let nm=terms[i].against;if((i<(terms.length-2))&&(nm!=-1)){text+='<td class=\"flt\">'+terms[i].F.toFixed(DPL).toString()+'</td>';let prob='';if(terms[i].P>rejection_level)
prob=terms[i].P.toFixed(DPL).toString();else{if(alpha){prob='<b><i>'+terms[i].P.toFixed(DPL).toString()+'</i></b>';}else prob=terms[i].P.toFixed(DPL).toString();}
text+='<td class=\"flt\">'+prob+'</td>';text+='<td>'+terms[nm].name+'</td>';}else{text+='<td></td>';text+='<td></td>';if(nm==-1)text+='<td><b>No Test</b></td>';else text+='<td></td>';}
text+='</tr>';}
text+='</tbody></table></div>';let d=document.getElementById('analysis');d.innerHTML=text;}
function displayAverages(){let d=document.getElementById('averages');let table='';for(let i=0,len=terms.length-2;i<len;i++){table+='<h3>Averages for '+terms[i].name+'</h3>';table+='<table><thead><tr>';let cds=[...terms[i].codes];for(let j=0,jlen=cds.length;j<jlen;j++){if(cds[j]!=1)cds[j]='-';else table+='<th>'+factors[j].name+'</th>';}
table+='<th>Average</th><th>n</th><th>St. Dev.</th>'+'<th>Variance</th></tr></thead><tbody>';for(let j=0,jlen=terms[i].average.length;j<jlen;j++){table+='<tr>';let levs=terms[i].levels[j].split(',');for(let k=0,klen=levs.length;k<klen;k++){if(cds[k]==1){table+='<td>'+factors[k].levels[levs[k]]+'</td>';}}
table+='<td>'+terms[i].average[j].toFixed(DPL)+'</td>';let n=parseInt(terms[i].n[j]);table+='<td>'+n.toFixed(DPL)+'</td>';let std=0,variance=0;if(n>1){variance=(terms[i].sumx2[j]-Math.pow(terms[i].sumx[j],2)/n);variance=variance/(n-1);std=Math.sqrt(variance,2);}
table+='<td>'+std.toFixed(DPL)+'</td>';table+='<td>'+variance.toFixed(DPL)+'</td>';table+='</tr>';}
table+='</tbody></table>';}
d.innerHTML=table;}
function displayCTRules(){let c=document.getElementById('ctrules');let table='<div class="ct"><table><thead>';table+='<tr><th>Term</th>';table+='<th>Estimates</th></tr></thead><tbody>';for(let i=0,len=terms.length-1;i<len;i++){table+='<tr><td>'+terms[i].name+'</td>';let components=[],name='',vc='&sigma',compname='',maincomp='';for(let j=terms.length-2;j>=0;j--){if(terms[i].varcomp[j]>0){if((terms[j].name==='Error')||(terms[j].name==='Residual'))name='&epsilon;';else name=terms[j].name;if(terms[j].type===RANDOM)vc='&sigma;';else vc='&Sigma;';if(terms[i].varcomp[j]===1)compname=vc+'<sup>2</sup><sub>'+name+'</sub>';else compname=terms[i].varcomp[j].toString()+'&middot;'+vc+'<sup>2</sup><sub>'+name+'</sub>';if(i!=j)components.push(compname);else maincomp='<span class="ctcomp">'+compname+'</span>';}}
components.push(maincomp);table+='<td>'+components.join(' + ')+'</td></tr>';}
table+='</tbody></table></div>';c.innerHTML=table;}
function displayData(){let tb=document.getElementById('datatab');let table='<div class="ct" id="datatable"></div>';table+='<div class="ct" id="transforms">'+'<h3>Transformations</h3>'+'<p><input type="radio" name="transf" value="none"'+' onclick="anova.transformData(0)" checked>None</p>'+'<p><input type="radio" name="transf" value="sqrt"'+' onclick="anova.transformData(1)">&radic;X</p>'+'<p><input type="radio" name="transf" value="sqrt3"'+' onclick="anova.transformData(2)">&#8731;X</p>'+'<p><input type="radio" name="transf" value="sqrt4"'+' onclick="anova.transformData(3)">&#8732;X</p>'+'<p><input type="radio" name="transf" value="log"'+' onclick="anova.transformData(4)">Log(X+1)</p>'+'<p><input type="radio" name="transf" value="ln"'+' onclick="anova.transformData(5)">Ln(X+1)</p>'+'<p><input type="radio" name="transf" value="arcsin"'+' onclick="anova.transformData(6)">arcsin(X)</p>'+'<p><input type="radio" name="transf" value="mult"'+' onclick="anova.transformData(7)">X &times;'+' <input type="number" id="multc" value="100"></p>'+'<p><input type="radio" name="transf" value="div"'+' onclick="anova.transformData(8)">X &divide;'+' <input type="number"  id="divc" value="100"></p>'+'<p><input type="radio" name="transf" value="pow"'+' onclick="anova.transformData(9)">X&#8319;'+' <input type="number"  id="powc" value="0.25"></p>'+'</div>';tb.innerHTML=table;displayDataTable();}
function displayDataTable(){let tb=document.getElementById('datatable');let table='<table><thead><tr>';for(let i=0,nf=factors.length;i<nf;i++){table+='<th>'+factors[i].name+'</th>';}
table+='<th>DATA</th></tr></thead><tbody>';let lcodes='';for(let i=0,len=data.length;i<len;i++){lcodes='';for(let j=0,ll=data[i].levels.length;j<ll;j++){lcodes+='<td>'+data[i].levels[j]+'</td>';}
for(let j=0,cl=data[i].values.length;j<cl;j++){table+='<tr>'+lcodes;table+='<td>'+data[i].values[j].toString()+'</td>';table+='</tr>';}}
table+='</tbody></table>';tb.innerHTML=table;}
function displayMultipleComparisons(){let d=document.getElementById('mtests');let text='<div class="ct">'+'<h3>Multiple Comparison Tests</h3>'+'<p><input type="radio" name="test" value="none" checked>None</p>'+'<p><input type="radio" name="test" value="snk">Student-Newman-Keuls (SNK)</p>'+'<p><input type="radio" name="test" value="tukey">Tukey (HSD)</p>'+'<p>Rejection criteria (&alpha;): <input type="number" id="mtests_alpha" value="'+
mt_rejection_level.toString()+'" min="0.00000" max="0.999999" step="0.01" onchange="anova.setMtAlpha()"/></p>'+'<p><button onclick="anova.multipleTests()">Compute</button></p>'+'</div>'+'<div class="ct" id="mtest_results" style="display: none;"></div>';d.innerHTML=text;}
function getCellsSS(){let tl=terms.length,dl=data.length;for(let i=0;i<tl;i++){let c=terms[i].codes;let nm=[];for(let j=0,l=c.length;j<l;j++){if(c[j]==1)nm.push(factors[j].name);}
terms[i].name=nm.join('&times;');for(let j=0;j<dl;j++){let t=[];for(let k=0;k<nfactors;k++){if(c[k]===1)t.push(data[j].codes[k]);else t.push('-');}
let idx=terms[i].levels.indexOf(t.toString());if(idx!=-1){terms[i].sumx[idx]+=data[j].sumx;terms[i].sumx2[idx]+=data[j].sumx2;terms[i].n[idx]+=data[j].n;}else{terms[i].levels.push(t.toString());terms[i].sumx.push(data[j].sumx);terms[i].sumx2.push(data[j].sumx2);terms[i].n.push(data[j].n);terms[i].nlevels++;}}
if(terms[i].nlevels!=terms[i].combins)nesting=true;if(nesting)residual.name='Residual';for(let j=0,nl=(terms[i].n.length-1);j<nl;j++){if(terms[i].n[j]!=terms[i].n[j+1]){alert('Asymmetrical data set. Analysis stopped!');return false;}}
let v;for(let j=0,nl=terms[i].nlevels;j<nl;j++){terms[i].average[j]=terms[i].sumx[j]/terms[i].n[j];v=terms[i].sumx2[j]-Math.pow(terms[i].sumx[j],2)/terms[i].n[j];terms[i].ss+=v;}
if(terms[i].order==1){terms[i].SS=total.ss-terms[i].ss;}else{let tSS=total.ss;for(let j=0;j<i;j++){let cj=terms[j].codes,cjl=c.length;let included=true;for(let k=0;k<cjl;k++)
if((cj[k]==1)&&(c[k]==0))included=false;if(included)tSS-=terms[j].SS;}
terms[i].SS=tSS-terms[i].ss;}}
let te={idx:tl,name:residual.name,codes:new Array(nfactors+1).fill(1),order:terms[tl-1].order+1,combins:0,nlevels:0,levels:[],sumx:[],sumx2:[],n:[],average:[],ss:0,df:residual.df,SS:residual.ss,ct_codes:new Array(nfactors+1).fill(1),varcomp:[],MS:0,P:0,against:-2,F:0,type:RANDOM};terms.push(te);let tt={idx:tl+1,name:'Total',codes:new Array(nfactors+1).fill(1),order:terms[tl].order+1,combins:0,nlevels:0,levels:[],sumx:[],sumx2:[],n:[],average:[],ss:0,df:total.df,SS:total.ss,ct_codes:[],varcomp:[],MS:0,P:0,against:-2,F:0,type:RANDOM};terms.push(tt);return true;}
function homogeneityTests(){let d=document.getElementById('homogen');d.innerHTML='<div class="ht"><h2>Cochran\'s test</h2>'+
testCochran()+'</div>';d.innerHTML+='<div class="ht"><h2>Bartlett\'s test</h2>'+
testBartlett()+'</div>';d.innerHTML+='<div class="ht"><h2>Levene\'s test</h2>'+
testLevene()+'</div>';}
function testBartlett(){let k=data.length;let N=k*replicates;let pvar=0;for(let i=0;i<k;i++){pvar+=(data[i].n-1)*data[i].variance;}
pvar=pvar/(N-k);let A=(N-k)*Math.log(pvar);let B=0;for(let i=0;i<k;i++){B+=(data[i].n-1)*Math.log(data[i].variance);}
let C=1/(3*(k-1));let D=0;for(let i=0;i<k;i++){D+=1/(data[i].n-1);}
D-=1/(N-k);let bartlett_k=(A-B)/(1+(C*D));let prob=1.0-jStat.chisquare.cdf(bartlett_k,k-1);if(prob>1)prob=1;if(prob<0)prob=0;let result='';result+='<p>&#120594;<sup>2</sup> = '+bartlett_k.toFixed(DPL)+'</p>'+'<p>for <b><i>k</i> = '+k.toString()+'</b> averages and <b>&nu; = '+(k-1).toString()+'</b> degrees of freedom: <b>'+'</b></p><p>P = <b>'+prob.toFixed(DPL)+'</b></p>';return result;}
function testCochran(){let maxvar=0;let sumvar=0;let k=data.length;let df=replicates-1;for(let i=0;i<k;i++){if(data[i].variance>maxvar)maxvar=data[i].variance;sumvar+=data[i].variance;}
let cochran_C=maxvar/sumvar;let prob=0.0;if((cochran_C>0)&&(k>1)){prob=jStat.centralF.cdf((1/cochran_C-1)/(k-1),((k-1)*df),df)*k;if(prob>1)prob=Math.abs(Math.floor(prob)-prob);}
let result='';result+='<p>C = '+cochran_C.toFixed(DPL)+'</p>'+'<p>for <b><i>k</i> = '+k.toString()+'</b> averages and <b>&nu; = '+df.toString()+'</b> degrees of freedom</p>'+'<p>P = <b>'+prob.toFixed(DPL)+'</b></p>';let cv10=0;let cv05=0;let cv01=0;cv10=1/(1+(k-1)/(jStat.centralF.inv(1-0.10/k,df,df*(k-1))));cv05=1/(1+(k-1)/(jStat.centralF.inv(1-0.05/k,df,df*(k-1))));cv01=1/(1+(k-1)/(jStat.centralF.inv(1-0.01/k,df,df*(k-1))));result+="<p>Critical values of C for</p>";result+="<p>&alpha; = <i>0.10</i> &xrarr; "+cv10.toFixed(DPL)+", hence variances are ";result+=(cochran_C>cv10?"heterogeneous":"homogeneous");result+="</p>";result+="<p>&alpha; = <i>0.05</i> &xrarr; "+cv05.toFixed(DPL)+", hence variances are ";result+=(cochran_C>cv05?"heterogeneous":"homogeneous");result+="</p>";result+="<p>&alpha; = <i>0.01</i> &xrarr; "+cv01.toFixed(DPL)+", hence variances are ";result+=(cochran_C>cv01?"heterogeneous":"homogeneous");result+="</p>";return result;}
function testLevene(){let k=data.length;let N=0,W=0;for(let i=0;i<k;i++)N+=data[i].n;W=(N-k)/(k-1);let Z=0,Zi=[],zsum,zsum2,denom=0,z;for(let d of data){zsum=0,zsum2=0;for(let v of d.values){z=Math.abs(v-d.average);zsum+=z;zsum2+=Math.pow(z,2);Z+=z;}
Zi.push(zsum/replicates);denom+=zsum2-Math.pow(zsum,2)/replicates;}
Z=Z/N;let numer=0;for(let zi of Zi){numer+=replicates*Math.pow(zi-Z,2);}
let levene=W*numer/denom;let df=replicates-1;let prob=1-jStat.centralF.cdf(levene,k-1,N-k);let result='';result+='<p>F = '+levene.toFixed(DPL)+'</p>'+'<p>for <b><i>k</i> = '+(k-1).toString()+'</b> groups and '+'<b>&nu; = '+(N-k).toString()+'</b> degrees of freedom</p>'+'<p>P = <b>'+prob.toFixed(DPL)+'</b></p>';let cv10=0;let cv05=0;let cv01=0;cv10=jStat.centralF.inv(0.90,k-1,N-k);cv05=jStat.centralF.inv(0.95,k-1,N-k);cv01=jStat.centralF.inv(0.99,k-1,N-k);result+='<p>Critical values for</p>'+'<p>&alpha; = <i>0.10</i> &xrarr; '+cv10.toFixed(DPL)+', hence variances are '+
(levene>cv10?'heterogeneous':'homogeneous')+'</p>'+'<p>&alpha; = <i>0.05</i> &xrarr; '+cv05.toFixed(DPL)+', hence variances are '+
(levene>cv05?'heterogeneous':'homogeneous')+'</p>'+'<p>&alpha; = <i>0.01</i> &xrarr; '+cv01.toFixed(DPL)+', hence variances are '+
(levene>cv01?'heterogeneous':'homogeneous')+'</p>';Z=0,Zi=[],zsum,zsum2,denom=0,z;for(let d of data){zsum=0,zsum2=0;for(let v of d.values){z=Math.abs(v-d.median);zsum+=z;zsum2+=Math.pow(z,2);Z+=z;}
Zi.push(zsum/replicates);denom+=zsum2-Math.pow(zsum,2)/replicates;}
Z=Z/N;numer=0;for(let zi of Zi){numer+=replicates*Math.pow(zi-Z,2);}
let brown_forsythe=W*numer/denom;prob=1-jStat.centralF.cdf(brown_forsythe,k-1,N-k);result+='<h2>Brown-Forsythe\'s test</h2>'+'<p>F = '+brown_forsythe.toFixed(DPL)+'</p>'+'<p>for <b><i>k</i> = '+(k-1).toString()+'</b> groups and '+'<b>&nu; = '+(N-k).toString()+'</b> degrees of freedom</p>'+'<p>P = <b>'+prob.toFixed(DPL)+'</b></p>';cv10=0;cv05=0;cv01=0;cv10=jStat.centralF.inv(0.90,k-1,N-k);cv05=jStat.centralF.inv(0.95,k-1,N-k);cv01=jStat.centralF.inv(0.99,k-1,N-k);result+='<p>Critical values for</p>'+'<p>&alpha; = <i>0.10</i> &xrarr; '+cv10.toFixed(DPL)+', hence variances are '+
(brown_forsythe>cv10?'heterogeneous':'homogeneous')+'</p>'+'<p>&alpha; = <i>0.05</i> &xrarr; '+cv05.toFixed(DPL)+', hence variances are '+
(brown_forsythe>cv05?'heterogeneous':'homogeneous')+'</p>'+'<p>&alpha; = <i>0.01</i> &xrarr; '+cv01.toFixed(DPL)+', hence variances are '+
(brown_forsythe>cv01?'heterogeneous':'homogeneous')+'</p>';return result;}
function studentizedComparisons(test,fact,df,ms,avgs){let t="";let comps=[],p=0;let total_range=avgs.length;let range=total_range;do{let times=total_range-range+1;for(let i=0;i<times;i++){let j=i+range-1;let q=Math.abs(avgs[i].average-avgs[j].average)/Math.sqrt(ms/avgs[i].n);if(test=='tukey')p=1-jStat.tukey.cdf(q,total_range,df);if(test=='snk')p=1-jStat.tukey.cdf(q,range,df);if(p>mt_rejection_level){let included=false;for(let k=0,kl=comps.length;k<kl;k++){if((i>=comps[k][0])&&(j<=comps[k][1])){included=true;break;}}
if(!included){comps.push([i,j]);}}}
range--;}while(range>1);for(let i=0,il=avgs.length;i<il;i++){let included=false;for(let j=0,jl=comps.length;j<jl;j++){if((i>=comps[j][0])&&(i<=comps[j][1])){included=true;break;}}
if(!included){comps.push([i,i]);}}
comps.sort((a,b)=>(a[0]>b[0])?1:-1);t+='<table>';t+='<tr><th>Level</th><th>Average</th><th>n</th>';for(let i=0,il=comps.length;i<il;i++)t+='<th>&nbsp;</th>';t+='</tr>';for(let i=0,il=avgs.length;i<il;i++){t+='<tr><td>'+avgs[i].level+'</td><td>'+avgs[i].average.toString()+'</td><td>'+avgs[i].n.toString()+'</td>';for(let j=0,jl=comps.length;j<jl;j++){if((i>=comps[j][0])&&(i<=comps[j][1]))t+='<td>&#9679;</td>';else t+='<td>&nbsp;</td>';}
t+='</tr>';}
t+='</table>';return t;}
function multipleTests(){let studentized=['snk','tukey','duncan'];let elem=document.getElementsByName("test");let testName=0;for(let i=0;i<elem.length;i++){if(elem[i].checked){testName=elem[i].value;break;}}
elem=document.getElementById("mtest_results");if(testName!='none'){let text="";for(let i=0,len=mcomps.length;i<len;i++){let dferr=mcomps[i].df_against,mserr=mcomps[i].ms_against,fcode=mcomps[i].fcode;text+='<h3>Multiple comparisons for levels of factor '+mcomps[i].fname;if(mcomps[i].type=='interaction')text+=' within levels of '+mcomps[i].term+'</h3>';else text+='</h3>';for(let a in mcomps[i].averages){if(mcomps[i].type=='interaction'){let f=a.split(',');let t=[];for(let j=0,jlen=f.length;j<jlen;j++){if(f[j]!='-'){t.push('level <i>'+factors[j].levels[f[j]]+'</i> of factor '+factors[j].name);}}
text+='<h4>For '+t.join(' and ')+'</h4>';}
if(studentized.indexOf(testName)!=-1){text+=studentizedComparisons(testName,fcode,dferr,mserr,mcomps[i].averages[a]);}}}
if(text=="")text="<h3>No multiple tests available!</h3>Are you sure there are significant differences in fixed factors?";elem.innerHTML=text;elem.style.display='inline-block';}else{elem.innerHTML="";elem.style.display='none';}}
function openDataFile(){let selectedFile=document.getElementById('loadFile').files[0];if(typeof(selectedFile)==='undefined')return;let textType=/text.*/;if(selectedFile.type.match(textType)){filename=selectedFile.name;let h=document.getElementById('filename');h.innerHTML='Current selected file is <b>'+filename+'</b>';resetAnalysis();let reader=new FileReader();reader.onload=function(e){let header=true;let text=reader.result;let lines=text.split('\n');for(let i=0,len=lines.length;i<len;i++){let li=lines[i].trim();if((li[0]!=='#')&&(li.length!==0)){li=li.split(/[\s\t]+/);if(header){nfactors=li.length-1;for(let j=0;j<nfactors;j++){factors[j]={};let name=li[j];if(name.endsWith("*")){factors[j].type=RANDOM;name=name.slice(0,name.length-1);}else{factors[j].type=FIXED;}
factors[j].name=name;factors[j].orig_name=name;factors[j].nlevels=0;factors[j].levels=[];factors[j].nestedin=new Array(nfactors).fill(0);factors[j].depth=0;factors[j].subscript=String.fromCharCode(j+105);}
header=false;}else{if(li.length!=nfactors+1){let ln=i+1;let c=li.length.toString();let e=nfactors+1;alert('In line '+ln.toString()+' number of columns ('+
c+') is different from what is expected ('+
e.toString()+')');return;}
let levels=[],value=0,original=0,label='';for(let j=0;j<nfactors;j++){let p=factors[j].levels.indexOf(li[j]);if(p==-1){factors[j].levels.push(li[j]);factors[j].nlevels++;}
levels.push(li[j]);}
let n=li[nfactors].replace(",",".");let a=Number.parseFloat(n);if(Number.isNaN(a)){let ln=i+1;alert('In line '+ln.toString()+' data value ('+
n.toString()+') is not a valid number!');return;}else{value=a;original=a;if(a>max_value)max_value=a;if(a<min_value)min_value=a;}
label=levels.join('');if(data.length==0){data.push({label:label,levels:levels,values:[value],originals:[original],codes:[],sumx:0,sumx2:0,ss:0,n:0,n_orig:0,average:0,variance:0,median:0,cl95:0});}else{let idx=data.findIndex(e=>e.label===label);if(idx!=-1){data[idx].values.push(value);data[idx].originals.push(original);}else{data.push({label:label,levels:levels,values:[value],originals:[original],codes:[],sumx:0,sumx2:0,ss:0,n:0,n_orig:0,average:0,variance:0,median:0,cl95:0});}}}}}
let elem=document.getElementsByClassName("tabcontent");for(let i=0,len=elem.length;i<len;i++){elem[i].innerHTML="";}
displayData();computeCells();selectTab('analysis');}
reader.readAsText(selectedFile);document.getElementById('loadFile').value="";}else{alert('File type of '+filename+' not supported by your browser.');}}
let sts=[{name:'Use rejection criterium (&alpha;)',set:'<input type="checkbox" id="use_alpha"'+' onchange="anova.useAlpha()"',desc:'Check if you want to see in the ANOVA table F probabilities '+'highlighted whenever the F statistic surpasses the critical '+'level for the &alpha; selected. If the probability '+'associated to F is smaller than &alpha;, the probability is '+'displayed in <b><em>emphasized bold</em></b> font. For '+'each term, you should interpret the probabilities in the '+'ANOVA table as the probability of obtaining an F value '+'equal or larger than the observed F value.'},{name:'Ignore interactions',set:'<input type="checkbox" id="ignore_interactions"'+' onchange="anova.ignoreInteractions()"',desc:'Check if you want to see multiple <em>a posteriori</em> '+'comparison tests for main factors that are involved in '+'significant interactions with other factors.'},{name:'&alpha;',set:'<input type="number" id="anova_alpha" value="0.05" '+'min="0.00000" max="0.999999" step="0.05" onchange="'+'anova.setAlpha()"/>',desc:'Rejection criterium for H<sub>0</sub> in main ANOVA tests'}];function setSettings(){let elem=document.getElementById("settings");let text='<table><thead><tr><td>Setting</td><td>Value</td><td>'+'Description</td></tr></thead><tbody>';for(let s of sts){text+='<tr><td>'+s.name+'</td><td>'+s.set+'</td><td>'+
s.desc+'</td></tr>';}
text+='</tbody></table>';elem.innerHTML=text;}
function displaySettings(){let elem=document.getElementById("anovadisplay");let sets=document.getElementById("settings");if(elem.style.display=="none"){elem.style.display="block";sets.style.display="none";}else{elem.style.display="none";sets.style.display="block";}}
function transformData(t){let multc=parseFloat(document.getElementById("multc").value);let divc=parseFloat(document.getElementById("divc").value);let powc=parseFloat(document.getElementById("powc").value);max_value=Number.MIN_SAFE_INTEGER;min_value=Number.MAX_SAFE_INTEGER;switch(t){case 0:resetData();break;case 1:if(min_value>=0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.sqrt(v);});}}else alert('Cannot apply transformation to negative values!');break;case 2:if(min_value>=0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.pow(v,1/3);});}}else alert('Cannot apply transformation to negative values!');break;case 3:if(min_value>=0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.pow(v,1/4);});}}else alert('Cannot apply transformation to negative values!');break;case 4:if(min_value>0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.log(v+1)/Math.log(10);});}}else alert('Cannot apply transformation to negative'+'or null values!');break;case 5:if(min_value>0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.log(v+1);});}}else alert('Cannot apply transformation to'+' negative or null values!');break;case 6:if((min_value>=0)&&(max_value<=1)){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.asin(v);});}}else alert('Cannot apply transformation to values larger than 1'+' or smaller than 0!');break;case 7:for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=v*multc;});}
break;case 8:if(divc!=0){for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=v/divc;});}}else alert('Cannot divide by zero!');break;case 9:for(let d of data){d.values.forEach(function(v,idx,arr){arr[idx]=Math.pow(v,powc);});}
break;}
for(let f of factors){f.name=f.orig_name;f.nlevels=f.levels.length;f.nestedin=new Array(nfactors).fill(0);f.depth=0;}
terms=[];mcomps=[];corrected_df=0;replicates=0;total={df:0,ss:0};residual={name:"Error",df:0,ss:0};nesting=false;displayDataTable();computeCells();}
function setAlpha(){rejection_level=parseFloat(document.getElementById('anova_alpha').value);if(rejection_level>1)rejection_level=0.9999999;if(rejection_level<0)rejection_level=0.0000001;displayANOVA();}
function setMtAlpha(){let mta=document.getElementById('mtests_alpha').value;if(mta!=null){mt_rejection_level=parseFloat(mta);if(mt_rejection_level!=NaN){if(rejection_level>1)rejection_level=0.9999999;if(rejection_level<0)rejection_level=0.0000001;console.log(mt_rejection_level)
buildMultipleComparisons();multipleTests();}else{mt_rejection_level=DDEFAULT_REJECTION_LEVEL;}}}
function ignoreInteractions(){if(ignoreinteractions===false)ignoreinteractions=true;else ignoreinteractions=false;}
function useAlpha(){if(alpha===false)alpha=true;else alpha=false;displayANOVA();}
function resetData(){let tabs=document.getElementsByClassName("tabcontent");for(let t of tabs){if(tabs.id!='datatab')tabs.innerHTML="";}
max_value=Number.MIN_SAFE_INTEGER;min_value=Number.MAX_SAFE_INTEGER;for(let d of data){for(let i=0;i<d.values.length;i++){d.values[i]=d.originals[i];}
for(let v of d.values){if(v>max_value)max_value=v;if(v<min_value)min_value=v;}}}
function resetAnalysis(){let elems=document.getElementsByClassName('tabcontent')
for(let s of elems){if(typeof(s)!=='undefined'&&s!==null)s.innerHTML='';}
nfactors=0;factors=[];data=[];terms=[];mcomps=[];corrected_df=0;replicates=0;total={df:0,ss:0};residual={name:'Error',df:0,ss:0};nesting=false;max_value=Number.MIN_SAFE_INTEGER;min_value=Number.MAX_SAFE_INTEGER;}
return{setAlpha:setAlpha,setMtAlpha:setMtAlpha,openDataFile:openDataFile,resetData:resetData,transformData:transformData,multipleTests:multipleTests,displaySettings:displaySettings,setSettings:setSettings,useAlpha:useAlpha,ignoreInteractions:ignoreInteractions}})();function selectTab(name){let tabs=document.getElementsByClassName('tabs');for(let i=0,len=tabs.length;i<len;i++){if(tabs[i].name==name)tabs[i].classList.add('selected');else tabs[i].classList.remove('selected');}
let tabcontent=document.getElementsByClassName('tabcontent');for(let i=0,len=tabcontent.length;i<len;i++){if(tabcontent[i].id==name)tabcontent[i].style.display='block';else tabcontent[i].style.display='none';}}
document.addEventListener('DOMContentLoaded',function(){anova.setSettings();let b=document.getElementsByClassName('tabcontent');for(let i=0;i<b.length;i++)b[i].style.display='none';let s=document.getElementById('settings');s.style.display='none';document.getElementById('openFile').onclick=function(){document.getElementById('loadFile').click()};document.getElementById('loadFile').onchange=function(){anova.openDataFile();};document.getElementById('activate_settings').onclick=function(){anova.displaySettings();};});